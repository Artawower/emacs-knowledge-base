:PROPERTIES:
:ID: emacs-knowledge-base
:END:

#+TITLE: Emacs. Knowledge Base.
#+DESCRIPTION: Description of frequently occurring problems and needs
#+FILETAGS: :emacs:til:knowledge-base:
#+STARTUP: show2levels
#+ID: emacs-knowledge-base


This knowledge base describes common problems and their solutions. The repository is open to new pull requests, each of which should include:

Versions:
- Emacs <emax version>
- <package> <version>
<source> (in case it exists)


* Heading
:PROPERTIES:
:TOC:      :include all
:END:

:CONTENTS:
- [[#heading][Heading]]
- [[#completion][Completion]]
  - [[#embark][Embark]]
    - [[#how-to-copy-content-with-embarkvertico-from-consult-without-category][How to copy content with embark+vertico from consult without category?]]
- [[#evil][Evil]]
  - [[#evil-shift-left-evil-shift-right-loses-selection][evil-shift-left evil-shift-right loses selection]]
:END:

* Completion
** Embark
*** How to copy content with embark+vertico from consult without category?
Versions:
- Emacs 28.0.50
- vertico 1.0
- embark-consult 0.6
- embark 0.18

[[https://www.reddit.com/r/emacs/comments/zou9x0/comment/j20oo6o/?utm_source=share&utm_medium=web2x&context=3][Source]]

#+BEGIN_SRC emacs-lisp :results silent
(defun copy-grep-results-as-kill (strings)
  (embark-copy-as-kill
   (mapcar (lambda (string)
             (substring string
                        (1+ (next-single-property-change
                             (1+ (next-single-property-change 0 'face string))
                             'face string))))
           strings)))

(add-to-list 'embark-multitarget-actions 'copy-grep-results-as-kill)

(embark-define-keymap embark-consult-grep-map
  "Keymap for actions for consult-grep results."
  ("w" copy-grep-results-as-kill))

(setf (alist-get 'consult-grep embark-keymap-alist) 'embark-consult-grep-map)
#+END_SRC

* Evil
*** evil-shift-left evil-shift-right loses selection

[[https://superuser.com/questions/684540/evil-mode-evil-shift-left-loses-selection][source]]

#+BEGIN_SRC emacs-lisp :results silent
(define-key evil-visual-state-map (kbd ">") '@evil-shift-right-visual)
(define-key evil-visual-state-map (kbd "<") '@evil-shift-left-visual)
(define-key evil-visual-state-map [tab] @evil-shift-right-visual)
(define-key evil-visual-state-map [S-tab] @evil-shift-left-visual)

(defun @evil-shift-left-visual ()
  (interactive)
  (evil-shift-left (region-beginning) (region-end))
  (evil-normal-state)
  (evil-visual-restore))

(defun @evil-shift-right-visual ()
  (interactive)
  (evil-shift-right (region-beginning) (region-end))
  (evil-normal-state)
  (evil-visual-restore))
#+END_SRC


